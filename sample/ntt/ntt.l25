program Ntt {
    func swap(x: int*, y: int*): void{
        let tmp = *x;
        *x = *y;
        *y = tmp;
        return null;
    }

    let mod: int
    let root: int

    func add(x: int, y: int): int{
        let res = x + y;
        if (res >= mod) {
            res = res - mod;
        };
        return res;
    }

    func sub(x: int, y: int): int{
        let res = x - y;
        if (res < 0) {
            res = res + mod;
        };
        return res;
    }

    func mul(x: int, y: int): int{
        let res = x * y;
        return res % mod;
    }

    func pow(x: int, y: int): int{
        let res = 1;
        while (y != 0) {
            if (y & 1 == 1) {
                res = mul(res, x);
            };
            x = mul(x, x);
            y = y >> 1;
        };
        return res;
    }

    let len: int
    let idx: int
    let rev: int*

    func init(lim: int): void{
        len = 1;
        idx = 0;
        while (len < lim) {
            len = len << 1;
            idx = idx + 1;
        };
        if (rev != int*(null)) {
            free(rev);
        };
        rev = int*(alloc(len));
        let i = 0;
        while (i < len) {
            rev[i] = (rev[i >> 1] >> 1) | ((i & 1) << (idx - 1));
            i = i + 1;
        };
        return null;
    }

    func ntt(a: int*): void{
        {
            let i = 0;
            while (i < len) {
                if (i < rev[i]) {
                    swap(a + i, a + rev[i]);
                };
                i = i + 1;
            };
        };
        let i = 1;
        while (i < len) {
            let wn = pow(root, (mod - 1) / (i << 1));
            let j = 0;
            while (j < len) {
                let wk = 1;
                let k = j;
                while (k < j + i) {
                    let x = a[k];
                    let y = mul(a[k + i], wk);
                    a[k] = add(x, y);
                    a[k + i] = sub(x, y);
                    wk = mul(wk, wn);
                    k = k + 1;
                };
                j = j + (i << 1);
            };
            i = i << 1;
        };
        return null;
    }

    func intt(a: int*): void{
        ntt(a);
        {
            let i = 1;
            let j = len - 1;
            while (i < j) {
                swap(a + i, a + j);
                i = i + 1;
                j = j - 1;
            };
        };
        {
            let inv = pow(len, mod - 2);
            let i = 0;
            while (i < len) {
                a[i] = mul(a[i], inv);
                i = i + 1;
            };
        };
        return null;
    }

    main
    {
        mod = 998244353;
        root = 3;
        rev = int*(null);

        let n: int;
        let m: int;
        input(n, m);
        init(n + m - 1);
        let f = int*(alloc(len));
        {
            let i = 0;
            while (i < len) {
                if (i < n) {
                    input(f[i]);
                } else {
                    f[i] = 0;
                };
                i = i + 1;
            };
        };
        let g = int*(alloc(m));
        {
            let i = 0;
            while (i < len) {
                if (i < m) {
                    input(g[i]);
                } else {
                    g[i] = 0;
                };
                i = i + 1;
            };
        };

        ntt(f);
        ntt(g);
        {
            let i = 0;
            while (i < len) {
                f[i] = mul(f[i], g[i]);
                i = i + 1;
            };
        };
        intt(f);
        {
            let i = 0;
            while (i < n + m - 1) {
                output(f[i],' ');
                i = i + 1;
            };
        };
        output('\n');

        free(f);
        free(g);
        free(rev);
    }
}